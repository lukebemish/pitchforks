plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Uncomment the next line if you want to depend on the Architectury API
    //modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modApi("com.github.lukebemish.clojurewrapper:clojurewrapper-forgeloader:${rootProject.wrapper_version}") {
        transitive=false
    }
    forgeRuntimeLibrary "org.clojure:clojure:${rootProject.clojure_version}"
    modApi("com.github.lukebemish.clojurewrapper:clojurewrapper-forgeapi:${rootProject.wrapper_version}:remap") {
        transitive=false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

task excludeRuntimeJar (type: Jar) {
    dependsOn shadowJar
    from shadowJar.archiveFile.map { project.zipTree(it).matching {
        exclude "clojure/version.properties"
    } }
    classifier "dev"
}

remapJar {
    input.set(excludeRuntimeJar.archiveFile)
    dependsOn excludeRuntimeJar
    classifier null
}

jar {
    archivesBaseName = rootProject.archives_base_name+"-forge"
    classifier "dev-runtime"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}